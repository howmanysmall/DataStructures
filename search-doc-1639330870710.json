[{"title":"Getting Started with DataStructures","type":0,"sectionRef":"#","url":"docs/intro","content":"Getting Started with DataStructures Here are some quick links to get started using DataStructures: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/datastructures as a dependency. [dependencies] DataStructures = &quot;howmanysmall/datastructures@^1.1.0&quot; Copy "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"docs/Installation#next","content":"Now, check out the API reference! "},{"title":"Vertex","type":0,"sectionRef":"#","url":"api/Vertex","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Vertex","url":"api/Vertex#properties","content":" "},{"title":"Data​","type":1,"pageTitle":"Vertex","url":"api/Vertex#Data","content":"&lt;/&gt; Vertex.Data: T The data of the vertex.  "},{"title":"Visited​","type":1,"pageTitle":"Vertex","url":"api/Vertex#Visited","content":"&lt;/&gt; Vertex.Visited: boolean Whether the vertex has been visited.  "},{"title":"Parent​","type":1,"pageTitle":"Vertex","url":"api/Vertex#Parent","content":"&lt;/&gt; Vertex.Parent: Vertex&lt;T&gt;? The parent vertex. "},{"title":"ListNode","type":0,"sectionRef":"#","url":"api/ListNode","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ListNode","url":"api/ListNode#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ListNode","url":"api/ListNode#new","content":"&lt;/&gt; ListNode.new() → () Private function  "},{"title":"Is​","type":1,"pageTitle":"ListNode","url":"api/ListNode#Is","content":"&lt;/&gt; ListNode.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a ListNode. Determines whether the passed value is a ListNode. "},{"title":"Queue","type":0,"sectionRef":"#","url":"api/Queue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Queue","url":"api/Queue#properties","content":" "},{"title":"First​","type":1,"pageTitle":"Queue","url":"api/Queue#First","content":"&lt;/&gt; Queue.First: int The index of the first element in the queue.  "},{"title":"Length​","type":1,"pageTitle":"Queue","url":"api/Queue#Length","content":"&lt;/&gt; Queue.Length: int The length of the queue. "},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"api/Queue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Queue","url":"api/Queue#new","content":"&lt;/&gt; Queue.new() → Queue&lt;T&gt; Creates an empty Queue.  "},{"title":"Is​","type":1,"pageTitle":"Queue","url":"api/Queue#Is","content":"&lt;/&gt; Queue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a Queue. Determines whether the passed value is a Queue.  "},{"title":"Push​","type":1,"pageTitle":"Queue","url":"api/Queue#Push","content":"&lt;/&gt; Queue:Push( Value: T-- The value you are pushing. ) → int-- The passed value's location. Pushes the passed value to the end of the Queue. "},{"title":"Errors","type":1,"pageTitle":"Queue","url":"api/Queue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"Pop​","type":1,"pageTitle":"Queue","url":"api/Queue#Pop","content":"&lt;/&gt; Queue:Pop() → T?-- The first value from the Queue, if it exists. Removes the first value from the Queue.  "},{"title":"GetFront​","type":1,"pageTitle":"Queue","url":"api/Queue#GetFront","content":"&lt;/&gt; Queue:GetFront() → T?-- The first value. Gets the front value of the Queue.  "},{"title":"GetBack​","type":1,"pageTitle":"Queue","url":"api/Queue#GetBack","content":"&lt;/&gt; Queue:GetBack() → T?-- The last value. Gets the last value of the Queue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"Queue","url":"api/Queue#IsEmpty","content":"&lt;/&gt; Queue:IsEmpty() → boolean-- Whether or not the Queue is empty. Determines if the Queue is empty.  "},{"title":"Iterator​","type":1,"pageTitle":"Queue","url":"api/Queue#Iterator","content":"&lt;/&gt; Queue:Iterator() → QueueIterator-- The iterator, which is used in a for loop. Returns an iterator that can be used to iterate through the Queue. "},{"title":"Stack","type":0,"sectionRef":"#","url":"api/Stack","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Stack","url":"api/Stack#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"Stack","url":"api/Stack#Length","content":"&lt;/&gt; Stack.Length: int The length of the Stack. "},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"api/Stack#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stack","url":"api/Stack#new","content":"&lt;/&gt; Stack.new() → Stack&lt;T&gt; Creates an empty Stack.  "},{"title":"Is​","type":1,"pageTitle":"Stack","url":"api/Stack#Is","content":"&lt;/&gt; Stack.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a Stack. Determines whether the passed value is a Stack.  "},{"title":"Push​","type":1,"pageTitle":"Stack","url":"api/Stack#Push","content":"&lt;/&gt; Stack:Push( Value: T-- The value you are pushing. ) → int-- The passed value's location. Pushes the passed value to the end of the Stack. "},{"title":"Errors","type":1,"pageTitle":"Stack","url":"api/Stack##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"Pop​","type":1,"pageTitle":"Stack","url":"api/Stack#Pop","content":"&lt;/&gt; Stack:Pop() → T?-- The last value from the Stack, if it exists. Removes the last value from the Stack.  "},{"title":"GetTop​","type":1,"pageTitle":"Stack","url":"api/Stack#GetTop","content":"&lt;/&gt; Stack:GetTop() → T?-- The last value. Gets the last value of the Stack.  "},{"title":"GetBottom​","type":1,"pageTitle":"Stack","url":"api/Stack#GetBottom","content":"&lt;/&gt; Stack:GetBottom() → T?-- The first value. Gets the first value of the Stack.  "},{"title":"IsEmpty​","type":1,"pageTitle":"Stack","url":"api/Stack#IsEmpty","content":"&lt;/&gt; Stack:IsEmpty() → boolean-- Whether or not the Stack is empty. Determines if the Stack is empty.  "},{"title":"Iterator​","type":1,"pageTitle":"Stack","url":"api/Stack#Iterator","content":"&lt;/&gt; Stack:Iterator() → StackIterator-- The iterator, which is used in a for loop. Returns an iterator that can be used to iterate through the Stack. This is just an alias for ipairs, which you can use instead. This only exists for consistency reasons. Performance If you care about performance, do not use this function. Just do for Index, Value in ipairs(Stack) do directly. "},{"title":"BinaryHeap","type":0,"sectionRef":"#","url":"api/BinaryHeap","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#properties","content":" "},{"title":"ComparisonFunction​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#ComparisonFunction","content":"&lt;/&gt; BinaryHeap.ComparisonFunction: ComparisonFunction&lt;Comparable&gt;? The ComparisonFunction of the BinaryHeap.  "},{"title":"Length​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Length","content":"&lt;/&gt; BinaryHeap.Length: int The Length of the BinaryHeap. "},{"title":"Functions​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#new","content":"&lt;/&gt; BinaryHeap.new( ComparisonFunction: ComparisonFunction&lt;Comparable&gt;?-- The comparison function. ) → BinaryHeap&lt;T&gt; Creates a new BinaryHeap.  "},{"title":"Push​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Push","content":"&lt;/&gt; BinaryHeap:Push( Key: Comparable-- The key you are pushing. Must be able to work with comparing methods like &lt;. ) → int-- The index of the pushed key in the heap. Pushes a new key to the heap.  "},{"title":"Pop​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Pop","content":"&lt;/&gt; BinaryHeap:Pop() → Comparable?-- The minimum element if it exists, otherwise nil. Removes the minimum element (the root) from the heap and returns it.  "},{"title":"Delete​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Delete","content":"&lt;/&gt; BinaryHeap:Delete( Index: int-- The index of the key you want to delete. ) → BinaryHeap&lt;T&gt;-- Returns the same heap. Deletes the key at Index by shifting it to root (treating it as -infinity) and then popping it.  "},{"title":"GetFront​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#GetFront","content":"&lt;/&gt; BinaryHeap:GetFront() → T-- The first value. Returns the front value of the heap.  "},{"title":"IsEmpty​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#IsEmpty","content":"&lt;/&gt; BinaryHeap:IsEmpty() → boolean-Trueifftheheapisempty. Determines if the heap is empty. "},{"title":"CircularBuffer","type":0,"sectionRef":"#","url":"api/CircularBuffer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#properties","content":" "},{"title":"Capacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Capacity","content":"&lt;/&gt; CircularBuffer.Capacity: int The capacity of the CircularBuffer.  "},{"title":"Data​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Data","content":"&lt;/&gt; CircularBuffer.Data: Array&lt;T&gt; The data of the CircularBuffer. "},{"title":"Functions​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#new","content":"&lt;/&gt; CircularBuffer.new( MaxCapacity: int-- The maximum size of the CircularBuffer before it starts removing values. ) → CircularBuffer&lt;T&gt;-- Returns a new CircularBuffer. Creates a new CircularBuffer.  "},{"title":"Clear​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Clear","content":"&lt;/&gt; CircularBuffer:Clear() → CircularBuffer&lt;T&gt;-- Returns self. Clears the CircularBuffer.  "},{"title":"GetCapacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#GetCapacity","content":"&lt;/&gt; CircularBuffer:GetCapacity() → int-- The maximum capacity of the CircularBuffer. Gets the capacity of the CircularBuffer.  "},{"title":"GetMaxCapacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#GetMaxCapacity","content":"&lt;/&gt; CircularBuffer:GetMaxCapacity() → int-- The maximum capacity of the CircularBuffer. Gets the capacity of the CircularBuffer.  "},{"title":"IsEmpty​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#IsEmpty","content":"&lt;/&gt; CircularBuffer:IsEmpty() → boolean-- Whether or not the CircularBuffer is empty. Returns whether or not the CircularBuffer is empty.  "},{"title":"IsFull​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#IsFull","content":"&lt;/&gt; CircularBuffer:IsFull() → boolean-- Whether or not the CircularBuffer is full. Returns whether or not the CircularBuffer is full.  "},{"title":"Push​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Push","content":"&lt;/&gt; CircularBuffer:Push( NewData: T-- The data you are pushing. ) → T?-- Returns the removed data, if there was any. Pushes the passed data to the front of the CircularBuffer. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescription&quot;InvalidData&quot;\tThrown when NewData is null.  "},{"title":"Replace​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Replace","content":"&lt;/&gt; CircularBuffer:Replace( Index: int,-- The index you are replacing. NewData: T-- The data you are replacing with. ) → T-- The replaced data. Replaces the index in the CircularBuffer with the passed data. This function errors if there is no index to replace. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescription&quot;InvalidData&quot;\tThrown when NewData is null. &quot;InvalidIndex&quot;\tThrown when Index is not a number. &quot;IndexTooLarge&quot;\tThrown when Index is greater than the CircularBuffer's capacity.  "},{"title":"Insert​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Insert","content":"&lt;/&gt; CircularBuffer:Insert( Index: int,-- The index you are replacing. NewData: T-- The data you are replacing with. ) → T?-- The replaced data. Inserts the data at the index in the CircularBuffer. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescription&quot;InvalidData&quot;\tThrown when NewData is null. &quot;InvalidIndex&quot;\tThrown when Index is not a number. &quot;IndexTooLarge&quot;\tThrown when Index is greater than the CircularBuffer's capacity.  "},{"title":"PeekAt​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#PeekAt","content":"&lt;/&gt; CircularBuffer:PeekAt( Index: int?-- The index you are getting. Defaults to 1. ) → T?-- The value at the given index. Returns the value at the given index. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescription&quot;InvalidIndex&quot;\tThrown when Index is not a number or nil.  "},{"title":"Iterator​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Iterator","content":"&lt;/&gt; CircularBuffer:Iterator() → Iterator-- The ipairs iterator. Returns an iterator for iterating over the CircularBuffer. Just a wrapper for ipairs(self.Data). Performance If you care about performance, do not use this function. Just do for Index, Value in ipairs(CircularBuffer.Data) do directly. "},{"title":"ArrayList","type":0,"sectionRef":"#","url":"api/ArrayList","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#properties","content":" "},{"title":"IsFixedSize​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IsFixedSize","content":"&lt;/&gt; ArrayList.IsFixedSize: boolean Whether or not the ArrayList is fixed size. Defaults to false.  "},{"title":"IsReadOnly​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IsReadOnly","content":"&lt;/&gt; ArrayList.IsReadOnly: boolean Whether or not the ArrayList is read-only. Defaults to false.  "},{"title":"Length​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Length","content":"&lt;/&gt; ArrayList.Length: number The length of the ArrayList. "},{"title":"Functions​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#new","content":"&lt;/&gt; ArrayList.new() → ArrayList&lt;T&gt; Creates a new ArrayList.  "},{"title":"FromCapacity​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#FromCapacity","content":"&lt;/&gt; ArrayList.FromCapacity( Capacity: int-- The capacity of the ArrayList. ) → ArrayList&lt;T&gt; Creates a new ArrayList with the given capacity.  "},{"title":"FromArray​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#FromArray","content":"&lt;/&gt; ArrayList.FromArray( Array: Array&lt;T&gt;-- The array to use as the source. This makes a shallow copy. ) → ArrayList&lt;T&gt; Creates a new ArrayList from the given array. Will not mutate the original array.  "},{"title":"Is​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Is","content":"&lt;/&gt; ArrayList.Is( Value: any-- The value to check. ) → boolean Determines if the passed Value is an ArrayList.  "},{"title":"MarkReadOnly​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#MarkReadOnly","content":"&lt;/&gt; ArrayList.MarkReadOnly( List: ArrayList&lt;T&gt;-- The ArrayList to make read-only. ) → ArrayList&lt;T&gt; Marks the ArrayList as read-only. Returns a clone of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;InvalidArgument&quot;\tThrown when the List is nil. &quot;NotArrayList&quot;\tThrown when the List isn't an ArrayList.  "},{"title":"MarkFixedSize​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#MarkFixedSize","content":"&lt;/&gt; ArrayList.MarkFixedSize( List: ArrayList&lt;T&gt;-- The ArrayList to mark as fixed size. ) → ArrayList&lt;T&gt; Marks the ArrayList as a fixed size. Returns a clone of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;InvalidArgument&quot;\tThrown when the List is nil. &quot;NotArrayList&quot;\tThrown when the List isn't an ArrayList.  "},{"title":"Add​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Add","content":"&lt;/&gt; ArrayList:Add( Value: NonNil-- The value to be added to the end of the ArrayList. The value cannot be nil. ) → int-- The ArrayList index at which the value has been added. Adds an object to the end of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;IsFixedSize&quot;\tThrown when the ArrayList is fixed size. &quot;IsReadOnly&quot;\tThrown when the ArrayList is read-only. &quot;InvalidArgument&quot;\tThrown when the value is nil.  "},{"title":"Clone​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Clone","content":"&lt;/&gt; ArrayList:Clone() → ArrayList&lt;T&gt;-- A shallow copy of the ArrayList. Creates a shallow copy of the ArrayList.  "},{"title":"Clear​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Clear","content":"&lt;/&gt; ArrayList:Clear() → () Clears the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;IsFixedSize&quot;\tThrown when the ArrayList is fixed size. &quot;IsReadOnly&quot;\tThrown when the ArrayList is read-only.  "},{"title":"Contains​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Contains","content":"&lt;/&gt; ArrayList:Contains( Value: NonNil-- The value to check. ) → boolean Determines if the ArrayList contains the given value. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;InvalidArgument&quot;\tThrown when the value is nil.  "},{"title":"IndexOf​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IndexOf","content":"&lt;/&gt; ArrayList:IndexOf( Value: NonNil-- The value to search for. ) → int?-- The index of the value. Locates the index of the given value in the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;InvalidArgument&quot;\tThrown when the value is nil.  "},{"title":"Insert​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Insert","content":"&lt;/&gt; ArrayList:Insert( Index: int,-- The index to insert at. Value: NonNil-- The value to be added to the end of the ArrayList. The value cannot be nil. ) → () Inserts the given value into the ArrayList at the given index. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescription&quot;IsFixedSize&quot;\tThrown when the ArrayList is fixed size. &quot;IsReadOnly&quot;\tThrown when the ArrayList is read-only. &quot;InvalidArgument&quot;\tThrown when either the value or the index is incorrect. "},{"title":"MaxPriorityQueue","type":0,"sectionRef":"#","url":"api/MaxPriorityQueue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Length","content":"&lt;/&gt; MaxPriorityQueue.Length: int The length of the MaxPriorityQueue.  "},{"title":"Heap​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Heap","content":"&lt;/&gt; MaxPriorityQueue.Heap: Array&lt;T&gt; The heap data of the MaxPriorityQueue. "},{"title":"Functions​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#new","content":"&lt;/&gt; MaxPriorityQueue.new() → MaxPriorityQueue&lt;T&gt; Creates a new MaxPriorityQueue.  "},{"title":"Is​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Is","content":"&lt;/&gt; MaxPriorityQueue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a MaxPriorityQueue. Determines whether the passed value is a MaxPriorityQueue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#IsEmpty","content":"&lt;/&gt; MaxPriorityQueue:IsEmpty() → boolean-- This will be true iff the queue is empty. Check whether the MaxPriorityQueue has no elements.  "},{"title":"InsertWithPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MaxPriorityQueue:InsertWithPriority( Value: T,-- The value of the element. Priority: number-- The priority of the element. ) → int-- The inserted position. Add an element to the MaxPriorityQueue with an associated priority. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"ChangePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ChangePriority","content":"&lt;/&gt; MaxPriorityQueue:ChangePriority( Value: T,-- The value you are updating the priority of. NewPriority: number-- The new priority of the value. ) → int?-- The new position of the HeapEntry if it was found. This function will error if it couldn't find the value. Changes the priority of the given value in the MaxPriorityQueue. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil. &quot;CouldNotFind&quot;\tThrown when the value couldn't be found.  "},{"title":"GetFirstPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MaxPriorityQueue:GetFirstPriority() → number?-- The priority of the first value. Gets the priority of the first value in the MaxPriorityQueue. This is the value that will be removed last.  "},{"title":"GetLastPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#GetLastPriority","content":"&lt;/&gt; MaxPriorityQueue:GetLastPriority() → number?-- The priority of the last value. Gets the priority of the last value in the MaxPriorityQueue. This is the value that will be removed first.  "},{"title":"PopElement​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#PopElement","content":"&lt;/&gt; MaxPriorityQueue:PopElement( OnlyValue: boolean?-- Whether or not to return only the value or the entire entry. ) → T | HeapEntry&lt;T&gt;?-- The removed element. Remove the element from the MaxPriorityQueue that has the highest priority, and return it.  "},{"title":"ToArray​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ToArray","content":"&lt;/&gt; MaxPriorityQueue:ToArray( OnlyValues: boolean?-- Whether or not the array is just the values or the priorities as well. ) → Array&lt;T&gt; | Array&lt;HeapEntry&lt;T&gt;&gt;-- The MaxPriorityQueue's array. Converts the entire MaxPriorityQueue to an array.  "},{"title":"Iterator​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Iterator","content":"&lt;/&gt; MaxPriorityQueue:Iterator(OnlyValues: boolean?Whetherornottheiteratorreturnsjustthevaluesortheprioritiesaswell.) → IteratorFunction-- The iterator function. Usage is for Index, Value in MaxPriorityQueue:Iterator(OnlyValues) do. Returns an iterator function for iterating over the MaxPriorityQueue. Performance If you care about performance, do not use this function. Just do for Index, Value in ipairs(MaxPriorityQueue.Heap) do directly.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ReverseIterator","content":"&lt;/&gt; MaxPriorityQueue:ReverseIterator( OnlyValues: boolean?-- Whether or not the iterator returns just the values or the priorities as well. ) → IteratorFunction-- The iterator function. Usage is for Index, Value in MaxPriorityQueue:ReverseIterator(OnlyValues) do. Returns an iterator function for iterating over the MaxPriorityQueue in reverse.  "},{"title":"Clear​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Clear","content":"&lt;/&gt; MaxPriorityQueue:Clear() → MaxPriorityQueue&lt;T&gt;-- The same MaxPriorityQueue. Clears the entire MaxPriorityQueue.  "},{"title":"Contains​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Contains","content":"&lt;/&gt; MaxPriorityQueue:Contains( Value: T-- The value you are searching for. ) → boolean-- Whether or not the value was found. Determines if the MaxPriorityQueue contains the given value. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"RemovePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#RemovePriority","content":"&lt;/&gt; MaxPriorityQueue:RemovePriority( Priority: number-- The priority you are removing from the MaxPriorityQueue. ) → () Removes the HeapEntry with the given priority, if it exists.  "},{"title":"RemoveValue​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#RemoveValue","content":"&lt;/&gt; MaxPriorityQueue:RemoveValue( Value: T-- The value you are removing from the MaxPriorityQueue. ) → () Removes the HeapEntry with the given value, if it exists. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil. "},{"title":"LinkedList","type":0,"sectionRef":"#","url":"api/LinkedList","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Length","content":"&lt;/&gt; LinkedList.Length: int The length of the LinkedList. "},{"title":"Functions​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#functions","content":" "},{"title":"new​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#new","content":"&lt;/&gt; LinkedList.new( Values: Array&lt;T&gt;?-- An optional array that contains the values you want to add. ) → LinkedList&lt;T&gt; Creates an empty LinkedList.  "},{"title":"Is​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Is","content":"&lt;/&gt; LinkedList.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a LinkedList. Determines whether the passed value is a LinkedList.  "},{"title":"Push​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Push","content":"&lt;/&gt; LinkedList:Push( Value: T-- The value you are appending. ) → ListNode&lt;T&gt;-- The appended node. Adds the element Value to the end of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value passed is nil.  "},{"title":"Append​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Append","content":"&lt;/&gt; LinkedList:Append( List: LinkedList&lt;T&gt;-- The LinkedList you are appending from. ) → () Adds the elements from List to the end of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescription&quot;InvalidList&quot;\tThrown when the List passed is not a LinkedList.  "},{"title":"PushFront​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#PushFront","content":"&lt;/&gt; LinkedList:PushFront( Value: T-- The value you are prepending. ) → ListNode&lt;T&gt;-- The prepended node. Adds the element Value to the start of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value passed is nil.  "},{"title":"Prepend​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Prepend","content":"&lt;/&gt; LinkedList:Prepend( List: LinkedList&lt;T&gt;-- The LinkedList you are prepending from. ) → () Adds the elements from List to the start of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescription&quot;InvalidList&quot;\tThrown when the List passed is not a LinkedList.  "},{"title":"Pop​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Pop","content":"&lt;/&gt; LinkedList:Pop() → ListNode&lt;T&gt;?-- The popped node, if there was one. Removes the first element and returns it, or nil if the list is empty. This operation should compute in O(1) time.  "},{"title":"PopBack​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#PopBack","content":"&lt;/&gt; LinkedList:PopBack() → ListNode&lt;T&gt;?-- The popped node, if there was one. Removes the last element and returns it, or nil if the list is empty. This operation should compute in O(1) time.  "},{"title":"IsEmpty​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#IsEmpty","content":"&lt;/&gt; LinkedList:IsEmpty() → boolean Returns true if the LinkedList is empty. This operation should compute in O(1) time.  "},{"title":"Clear​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Clear","content":"&lt;/&gt; LinkedList:Clear() → LinkedList&lt;T&gt; Removes all elements from the LinkedList. This operation should compute in O(n) time.  "},{"title":"Contains​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Contains","content":"&lt;/&gt; LinkedList:Contains( Value: ListNode&lt;T&gt; | T-- The value you are searching for. ) → boolean Returns true if the LinkedList contains an element equal to the given value.  "},{"title":"Iterator​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Iterator","content":"&lt;/&gt; LinkedList:Iterator() → ListIterator Provides a forward iterator.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#ReverseIterator","content":"&lt;/&gt; LinkedList:ReverseIterator() → ListIterator Provides a reverse iterator.  "},{"title":"ToArray​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#ToArray","content":"&lt;/&gt; LinkedList:ToArray() → Array&lt;T&gt;-- An array with every element in the LinkedList. Returns an array containing all of the elements in this list in proper sequence (from first to last element).  "},{"title":"Remove​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Remove","content":"&lt;/&gt; LinkedList:Remove( Index: int-- The index of the node you want to remove. ) → LinkedList&lt;T&gt; Removes the element at the given index from the LinkedList. This operation should compute in O(n) time. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescription&quot;InvalidIndex&quot;\tThrown when the index is out of bounds.  "},{"title":"RemoveValue​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#RemoveValue","content":"&lt;/&gt; LinkedList:RemoveValue( Value: T-- The value you want to remove from the LinkedList. ) → LinkedList&lt;T&gt; Removes any element with the given value from the LinkedList. This operation should compute in O(n) time.  "},{"title":"RemoveNode​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#RemoveNode","content":"&lt;/&gt; LinkedList:RemoveNode( Node: ListNode&lt;T&gt;-- The node you want to remove from the LinkedList. ) → LinkedList&lt;T&gt; Removes the given ListNode from the LinkedList. This operation should compute in O(n) time. "},{"title":"MinPriorityQueue","type":0,"sectionRef":"#","url":"api/MinPriorityQueue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Length","content":"&lt;/&gt; MinPriorityQueue.Length: int The length of the MinPriorityQueue.  "},{"title":"Heap​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Heap","content":"&lt;/&gt; MinPriorityQueue.Heap: Array&lt;T&gt; The heap data of the MinPriorityQueue. "},{"title":"Functions​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#new","content":"&lt;/&gt; MinPriorityQueue.new() → MinPriorityQueue&lt;T&gt; Creates a new MinPriorityQueue.  "},{"title":"Is​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Is","content":"&lt;/&gt; MinPriorityQueue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a MinPriorityQueue. Determines whether the passed value is a MinPriorityQueue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#IsEmpty","content":"&lt;/&gt; MinPriorityQueue:IsEmpty() → boolean-- This will be true iff the queue is empty. Check whether the MinPriorityQueue has no elements.  "},{"title":"InsertWithPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MinPriorityQueue:InsertWithPriority( Value: T,-- The value of the element. Priority: number-- The priority of the element. ) → int-- The inserted position. Add an element to the MinPriorityQueue with an associated priority. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"ChangePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ChangePriority","content":"&lt;/&gt; MinPriorityQueue:ChangePriority( Value: T,-- The value you are updating the priority of. NewPriority: number-- The new priority of the value. ) → int?-- The new position of the HeapEntry if it was found. This function will error if it couldn't find the value. Changes the priority of the given value in the MinPriorityQueue. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil. &quot;CouldNotFind&quot;\tThrown when the value couldn't be found.  "},{"title":"GetFirstPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MinPriorityQueue:GetFirstPriority() → number?-- The priority of the first value. Gets the priority of the first value in the MinPriorityQueue. This is the value that will be removed last.  "},{"title":"GetLastPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#GetLastPriority","content":"&lt;/&gt; MinPriorityQueue:GetLastPriority() → number?-- The priority of the last value. Gets the priority of the last value in the MinPriorityQueue. This is the value that will be removed first.  "},{"title":"PopElement​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#PopElement","content":"&lt;/&gt; MinPriorityQueue:PopElement( OnlyValue: boolean?-- Whether or not to return only the value or the entire entry. ) → T | HeapEntry?-- The removed element. Remove the element from the MinPriorityQueue that has the highest priority, and return it.  "},{"title":"ToArray​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ToArray","content":"&lt;/&gt; MinPriorityQueue:ToArray( OnlyValues: boolean?-- Whether or not the array is just the values or the priorities as well. ) → Array&lt;T&gt; | Array&lt;HeapEntry&lt;T&gt;&gt;-- The MinPriorityQueue's array. Converts the entire MinPriorityQueue to an array.  "},{"title":"Iterator​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Iterator","content":"&lt;/&gt; MinPriorityQueue:Iterator(OnlyValues: boolean?Whetherornottheiteratorreturnsjustthevaluesortheprioritiesaswell.) → IteratorFunction-- The iterator function. Usage is for Index, Value in MinPriorityQueue:Iterator(OnlyValues) do. Returns an iterator function for iterating over the MinPriorityQueue. Performance If you care about performance, do not use this function. Just do for Index, Value in ipairs(MinPriorityQueue.Heap) do directly.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ReverseIterator","content":"&lt;/&gt; MinPriorityQueue:ReverseIterator( OnlyValues: boolean?-- Whether or not the iterator returns just the values or the priorities as well. ) → IteratorFunction-- The iterator function. Usage is for Index, Value in MinPriorityQueue:ReverseIterator(OnlyValues) do. Returns an iterator function for iterating over the MinPriorityQueue in reverse.  "},{"title":"Clear​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Clear","content":"&lt;/&gt; MinPriorityQueue:Clear() → MinPriorityQueue&lt;T&gt;-- The same MinPriorityQueue. Clears the entire MinPriorityQueue.  "},{"title":"Contains​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Contains","content":"&lt;/&gt; MinPriorityQueue:Contains( Value: T-- The value you are searching for. ) → boolean-- Whether or not the value was found. Determines if the MinPriorityQueue contains the given value. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil.  "},{"title":"RemovePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#RemovePriority","content":"&lt;/&gt; MinPriorityQueue:RemovePriority( Priority: number-- The priority you are removing from the MinPriorityQueue. ) → () Removes the HeapEntry with the given priority, if it exists.  "},{"title":"RemoveValue​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#RemoveValue","content":"&lt;/&gt; MinPriorityQueue:RemoveValue( Value: T-- The value you are removing from the MinPriorityQueue. ) → () Removes the HeapEntry with the given value, if it exists. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescription&quot;InvalidValue&quot;\tThrown when the value is nil. "},{"title":"SortedArray","type":0,"sectionRef":"#","url":"api/SortedArray","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#new","content":"&lt;/&gt; SortedArray.new( BaseArray: Array&lt;T&gt;?,-- An array of data which will be sorted upon instantiation. If this is omitted, an empty array is used. Comparison: &lt;T&gt;(( A: T, B: T ) → boolean)?-- An optional comparison function which is used to customize the element sorting, which will be given two elements A and B from the array as parameters. The function should return a boolean value specifying whether the first argument should be before the second argument in the sequence. If no comparison function is passed, the Lua-default A &lt; B sorting is used. ) → SortedArray&lt;T&gt; Instantiates and returns a new SortedArray, with optional parameters.  "},{"title":"ForEach​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#ForEach","content":"&lt;/&gt; SortedArray:ForEach( Function: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → ()-- The function you are running. ) → () Runs the given function on every element in the array. SortedArray.new({1, 2, 3}):ForEach(function(Value) print(Value) end) -- prints 1, 2, and 3   "},{"title":"Map​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Map","content":"&lt;/&gt; SortedArray:Map( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T?-- The function you are running. ) → Array&lt;T&gt;-- The mapped array. Maps the SortedArray to a new array using the given predicate. print(SortedArray.new({1, 2, 3}):Map(function(Value) return Value * 2 end)) -- {2, 4, 6}   "},{"title":"MapToSortedArray​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#MapToSortedArray","content":"&lt;/&gt; SortedArray:MapToSortedArray( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T?-- The function you are running. ) → SortedArray&lt;T&gt;-- The mapped array. Maps the SortedArray to a new SortedArray using the given predicate. print(SortedArray.new({1, 2, 3}):MapToSortedArray(function(Value) return Value * 2 end)) -- SortedArray&lt;[2, 4, 6]&gt;   "},{"title":"Some​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Some","content":"&lt;/&gt; SortedArray:Some( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → boolean?-- The function you are running. ) → boolean-- Whether or not the predicate was satisfied. Runs every the given predicate on every element in the array to check if some value in the array satisfies the predicate. print(SortedArray.new({2, 4, 6, 8}):Some(function(Value) return Value == 4 end)) -- true print(SortedArray.new({1, 2, 4, 6, 8}):Some(function(Value) return Value == 3 end)) -- false   "},{"title":"Every​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Every","content":"&lt;/&gt; SortedArray:Every( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → boolean?-- The function you are running. ) → boolean-- Whether or not the predicate was satisfied. Runs every the given predicate on every element in the array to check if every value in the array satisfies the predicate. print(SortedArray.new({2, 4, 6, 8}):Every(function(Value) return Value % 2 == 0 end)) -- true print(SortedArray.new({1, 2, 4, 6, 8}):Every(function(Value) return Value % 2 == 0 end)) -- false   "},{"title":"Reduce​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Reduce","content":"&lt;/&gt; SortedArray:Reduce( Predicate: &lt;T&gt;( Accumulator: T, Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T,-- The function you are running. InitialValue: T?-- The initial value of the accumulator. Defaults to the first value in the SortedArray. ) → T-- The final value of the accumulator. The Reduce method executes a user-supplied &quot;reducer&quot; callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. local Array = SortedArray.new({1, 2, 3, 4}) local function Reducer(PreviousValue, CurrentValue) return PreviousValue + CurrentValue end print(Array:Reduce(Reducer)) -- 10 print(Array:Reduce(Reducer, 5)) -- 15   "},{"title":"ReduceRight​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#ReduceRight","content":"&lt;/&gt; SortedArray:ReduceRight( Predicate: &lt;T&gt;( Accumulator: T, Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T,-- The function you are running. InitialValue: T?-- The initial value of the accumulator. Defaults to the first value in the SortedArray. ) → T-- The final value of the accumulator. The ReduceRight method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value. local Array = SortedArray.new({2, 30, 45, 100}) local function Reducer(PreviousValue, CurrentValue) return PreviousValue - CurrentValue end print(Array:ReduceRight(Reducer)) -- prints 23 print(Array:ReduceRight(Reducer, 2)) -- prints -175   "},{"title":"Filter​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Filter","content":"&lt;/&gt; SortedArray:Filter( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → boolean?-- The function you are running. ) → Array&lt;T&gt;-- The filtered array. The Filter method creates a new array with all elements that pass the test implemented by the provided function. local EvenArray = SortedArray.new({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}):Filter(function(Value) return Value % 2 == 0 end) print(EvenArray) -- {2, 4, 6, 8, 10}   "},{"title":"FilterToSortedArray​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#FilterToSortedArray","content":"&lt;/&gt; SortedArray:FilterToSortedArray( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → boolean?-- The function you are running. ) → SortedArray&lt;T&gt;-- The filtered array. The FilterToSortedArray method creates a new SortedArray with all elements that pass the test implemented by the provided function. local EvenArray = SortedArray.new({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}):FilterToSortedArray(function(Value) return Value % 2 == 0 end) print(EvenArray) -- SortedArray&lt;[2, 4, 6, 8, 10]&gt;   "},{"title":"Slice​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Slice","content":"&lt;/&gt; SortedArray:Slice( StartIndex: int?,-- The zero-based index at which to start extraction. A negative index can be used, indicating an offset from the end of the sequence. Slice(-2) extracts the last two elements in the sequence. If this is not provided, it'll default to 0. If it is greater than the index range of the sequence, an empty array is returned. EndIndex: int?-- Zero-based index before which to end extraction. Slice extracts up to but not including EndIndex. For example, Slice(1, 4) extracts the second element through the fourth element (elements indexed 1, 2, and 3). A negative index can be used, indicating an offset from the end of the sequence. Slice(2, -1) extracts the third element through the second-to-last element in the sequence. If EndIndex is omitted, Slice extracts through the end of the sequence (#self). If EndIndex is greater than the length of the sequence, slice extracts through to the end of the sequence (#self). ) → Array&lt;T&gt;-- The sliced array. The Slice() method returns a shallow copy of a portion of an array into a new SortedArray object selected from StartIndex to EndIndex (EndIndex not included) where StartIndex and EndIndex represent the index of items in that array. The original array will not be modified. local Array = SortedArray.new({&quot;Ant&quot;, &quot;Bison&quot;, &quot;Camel&quot;, &quot;Duck&quot;, &quot;Elephant&quot;}) print(Array:Slice(2)) -- {Camel, Duck, Elephant} print(Array:Slice(2, 4)) -- {Camel, Duck} print(Array:Slice(1, 5)) -- {Bison, Camel, Duck, Elephant} print(Array:Slice(-2)) -- {Duck, Elephant} print(Array:Slice(2, -1)) -- {Camel, Duck}   "},{"title":"SliceToSortedArray​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#SliceToSortedArray","content":"&lt;/&gt; SortedArray:SliceToSortedArray( StartIndex: int?,-- The zero-based index at which to start extraction. A negative index can be used, indicating an offset from the end of the sequence. Slice(-2) extracts the last two elements in the sequence. If this is not provided, it'll default to 0. If it is greater than the index range of the sequence, an empty array is returned. EndIndex: int?-- Zero-based index before which to end extraction. Slice extracts up to but not including EndIndex. For example, Slice(1, 4) extracts the second element through the fourth element (elements indexed 1, 2, and 3). A negative index can be used, indicating an offset from the end of the sequence. Slice(2, -1) extracts the third element through the second-to-last element in the sequence. If EndIndex is omitted, Slice extracts through the end of the sequence (#self). If EndIndex is greater than the length of the sequence, slice extracts through to the end of the sequence (#self). ) → SortedArray&lt;T&gt;-- The sliced array. The Slice() method returns a shallow copy of a portion of an array into a new SortedArray object selected from StartIndex to EndIndex (EndIndex not included) where StartIndex and EndIndex represent the index of items in that array. The original array will not be modified. local Array = SortedArray.new({&quot;Ant&quot;, &quot;Bison&quot;, &quot;Camel&quot;, &quot;Duck&quot;, &quot;Elephant&quot;}) print(Array:SliceToSortedArray(2)) -- SortedArray&lt;[Camel, Duck, Elephant]&gt; print(Array:SliceToSortedArray(2, 4)) -- SortedArray&lt;[Camel, Duck]&gt; print(Array:SliceToSortedArray(1, 5)) -- SortedArray&lt;[Bison, Camel, Duck, Elephant]&gt; print(Array:SliceToSortedArray(-2)) -- SortedArray&lt;[Duck, Elephant]&gt; print(Array:SliceToSortedArray(2, -1)) -- SortedArray&lt;[Camel, Duck]&gt;   "},{"title":"MapFilter​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#MapFilter","content":"&lt;/&gt; SortedArray:MapFilter( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T?-- The function to map and filter with. ) → Array&lt;T&gt;-- The mapped and filtered array. A combination function of Filter and Map. If the predicate function returns nil, the value will not be included in the new list. Any other result will add the result value to the new list. local Array = SortedArray.new({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}):MapFilter(function(Value) return if Value % 2 == 0 then if Value % 3 == 0 then nil else Value else nil end) print(Array) -- {2, 4, 8, 10}   "},{"title":"MapFilterToSortedArray​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#MapFilterToSortedArray","content":"&lt;/&gt; SortedArray:MapFilterToSortedArray( Predicate: &lt;T&gt;( Value: T, Index: int, self: SortedArray&lt;T&gt; ) → T?-- The function to map and filter with. ) → SortedArray&lt;T&gt;-- The mapped and filtered array. A combination function of Filter and Map. If the predicate function returns nil, the value will not be included in the new list. Any other result will add the result value to the new list. local Array = SortedArray.new({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}):MapFilterToSortedArray(function(Value) return if Value % 2 == 0 then if Value % 3 == 0 then nil else Value else nil end) print(Array) -- SortedArray&lt;[2, 4, 8, 10]&gt;   "},{"title":"Insert​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Insert","content":"&lt;/&gt; SortedArray:Insert( Value: T-- The value you are inserting. ) → int-- The index the value was inserted at. Inserts an element in the proper place which would preserve the array's orderedness. Returns the index the element was inserted. local Array = SortedArray.new({1, 3, 5}) print(Array:Insert(2)) -- 2 print(Array:Insert(6)) -- 5 print(Array:Insert(4)) -- 4 print(Array) -- SortedArray&lt;[1, 2, 3, 4, 5, 6]&gt;   "},{"title":"Find​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Find","content":"&lt;/&gt; SortedArray:Find( Value: T,-- The element to find or something that will be matched by the Eq function. Eq: (&lt;T&gt;( Value: T, Other: T ) → boolean)?,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. Lt: (&lt;T&gt;( Value: T, Other: T ) → boolean)?,-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. Low: int?,-- The lowest index to search. Defaults to 1. High: int?-- The high index to search. Defaults to the length of the SortedArray. ) → int?-- The numerical index of the element which was found, else nil. Finds an Element in a SortedArray and returns its position (or nil if non-existant). local Array = SortedArray.new({1, 2, 3, 4, 5}) print(Array:Find(3)) -- 3 print(Array:Find(6)) -- nil   "},{"title":"Copy​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Copy","content":"&lt;/&gt; SortedArray:Copy() → Array&lt;T&gt;-- The shallow copied array. Makes a shallow copy of the SortedArray. print(SortedArray.new({1, 2, 3, 4, 5}):Copy()) -- {1, 2, 3, 4, 5}   "},{"title":"Clone​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Clone","content":"&lt;/&gt; SortedArray:Clone() → SortedArray&lt;T&gt;-- The shallow copied array. Makes a shallow copy of the SortedArray and returns a new SortedArray. print(SortedArray.new({1, 2, 3, 4, 5}):Clone()) -- SortedArray&lt;[1, 2, 3, 4, 5]&gt;   "},{"title":"RemoveElement​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#RemoveElement","content":"&lt;/&gt; SortedArray:RemoveElement( Signature: T,-- The value you want to remove. Eq: (&lt;T&gt;( Value: T, Other: T ) → boolean)?,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. Lt: (&lt;T&gt;( Value: T, Other: T ) → boolean)?-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → T?-- The removed value. Searches the array via SortedArray:Find(Signature, Eq, Lt). If found, it removes the value and returns the value, otherwise returns nil. Only removes a single occurence. local Array = SortedArray.new({1, 2, 3, 4, 5}) print(Array:RemoveElement(3)) -- 3 print(Array:RemoveElement(6)) -- nil   "},{"title":"Sort​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Sort","content":"&lt;/&gt; SortedArray:Sort() → SortedArray&lt;T&gt;-- Returns self. Does table.sort(self, self.Comparison) and returns the SortedArray.  "},{"title":"SortIndex​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#SortIndex","content":"&lt;/&gt; SortedArray:SortIndex( Index: int-- The index to resort. ) → int-- The new position. Removes the value at Index and re-inserts it. This is useful for when a value may have updated in a way that could change it's position in a SortedArray. Returns Index.  "},{"title":"SortElement​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#SortElement","content":"&lt;/&gt; SortedArray:SortElement( Signature: T,-- The value you want to re-sort. Eq: (&lt;T&gt;( Value: T, Other: T ) → boolean)?,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. Lt: (&lt;T&gt;( Value: T, Other: T ) → boolean)?-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → int-- The new position. Calls RemoveElement(Signature, Eq, Lt) and re-inserts the value. This is useful for when a value may have updated in a way that could change its position in a SortedArray. Returns Index.  "},{"title":"Iterator​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Iterator","content":"&lt;/&gt; SortedArray:Iterator() → IteratorFunction-- The ipairs iterator.  Performance If you care about performance, do not use this function. Just do for Index, Value in ipairs(SortedArray) do directly. This returns an iterator for the SortedArray. This only exists for consistency reasons.  "},{"title":"Concat​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Concat","content":"&lt;/&gt; SortedArray:Concat( Separator: string?,-- The separator of the entries. StartIndex: int?,-- The index to start concatenating from. EndIndex: int?-- The index to end concatenating at. ) → string-- The stringify SortedArray. Calls table.concat on the SortedArray.  "},{"title":"RemoveIndex​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#RemoveIndex","content":"&lt;/&gt; SortedArray:RemoveIndex( Index: int?-- The index to remove. ) → T?-- The removed value. Calls table.remove on the SortedArray.  "},{"title":"Unpack​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#Unpack","content":"&lt;/&gt; SortedArray:Unpack( StartIndex: int?,-- The index to start unpacking at. EndIndex: int?-- The index to end unpacking at. ) → ...T-- The unpacked array. Calls table.unpack on the SortedArray.  "},{"title":"GetIntersection​","type":1,"pageTitle":"SortedArray","url":"api/SortedArray#GetIntersection","content":"&lt;/&gt; SortedArray:GetIntersection( SortedArray2: SortedArray&lt;T&gt;,-- The SortedArray to get the intersection with. Eq: (&lt;T&gt;( Value: T, Other: T ) → boolean)?,-- An optional function which checks for equality between the passed-in element and the other elements in the SortedArray. Lt: (&lt;T&gt;( Value: T, Other: T ) → boolean)?-- An optional less-than comparison function, which falls back on the comparison passed in from SortedArray.new. ) → SortedArray&lt;T&gt;-- A SortedArray with the common values between self and SortedArray2. Returns a SortedArray of Commonalities between self and another SortedArray. If applicable, the returned SortedArray will inherit the Comparison function from self. "},{"title":"Errors","type":1,"pageTitle":"SortedArray","url":"api/SortedArray##","content":"Type\tDescription&quot;InvalidSortedArray&quot;\tThrown when SortedArray2 is not a SortedArray. "}]