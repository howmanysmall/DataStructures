[{"title":"Getting Started with DataStructures","type":0,"sectionRef":"#","url":"docs/intro","content":"Getting Started with DataStructures Here are some quick links to get started using DataStructures: Installation guideAPI Docs","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/Installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"docs/Installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/datastructures as a dependency. [dependencies] DataStructures = &quot;howmanysmall/datastructures@^1.1.0&quot; Copy "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"docs/Installation#next","content":"Now, check out the API reference! "},{"title":"ListNode","type":0,"sectionRef":"#","url":"api/ListNode","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ListNode","url":"api/ListNode#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ListNode","url":"api/ListNode#new","content":"&lt;/&gt; ListNode.new() → () Private function  "},{"title":"Is​","type":1,"pageTitle":"ListNode","url":"api/ListNode#Is","content":"&lt;/&gt; ListNode.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a ListNode. Determines whether the passed value is a ListNode. "},{"title":"BinaryHeap","type":0,"sectionRef":"#","url":"api/BinaryHeap","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#properties","content":" "},{"title":"ComparisonFunction​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#ComparisonFunction","content":"&lt;/&gt; BinaryHeap.ComparisonFunction: ComparisonFunction&lt;Comparable&gt;? The ComparisonFunction of the BinaryHeap.  "},{"title":"Length​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Length","content":"&lt;/&gt; BinaryHeap.Length: int The Length of the BinaryHeap. "},{"title":"Functions​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#new","content":"&lt;/&gt; BinaryHeap.new( ComparisonFunction: ComparisonFunction&lt;Comparable&gt;?-- The comparison function. ) → BinaryHeap&lt;T&gt; Creates a new BinaryHeap.  "},{"title":"Push​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Push","content":"&lt;/&gt; BinaryHeap:Push( Key: Comparable-- The key you are pushing. Must be able to work with comparing methods like &lt;. ) → int-- The index of the pushed key in the heap. Pushes a new key to the heap.  "},{"title":"Pop​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Pop","content":"&lt;/&gt; BinaryHeap:Pop() → Comparable?-- The minimum element if it exists, otherwise nil. Removes the minimum element (the root) from the heap and returns it.  "},{"title":"Delete​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#Delete","content":"&lt;/&gt; BinaryHeap:Delete( Index: int-- The index of the key you want to delete. ) → BinaryHeap-- Returns the same heap. Deletes the key at Index by shifting it to root (treating it as -infinity) and then popping it.  "},{"title":"GetFront​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#GetFront","content":"&lt;/&gt; BinaryHeap:GetFront() → any-- The first value. Returns the front value of the heap.  "},{"title":"IsEmpty​","type":1,"pageTitle":"BinaryHeap","url":"api/BinaryHeap#IsEmpty","content":"&lt;/&gt; BinaryHeap:IsEmpty() → boolean-Trueifftheheapisempty. Determines if the heap is empty. "},{"title":"Stack","type":0,"sectionRef":"#","url":"api/Stack","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Stack","url":"api/Stack#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"Stack","url":"api/Stack#Length","content":"&lt;/&gt; Stack.Length: int The length of the Stack. "},{"title":"Functions​","type":1,"pageTitle":"Stack","url":"api/Stack#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stack","url":"api/Stack#new","content":"&lt;/&gt; Stack.new() → Stack&lt;T&gt; Creates an empty Stack.  "},{"title":"Is​","type":1,"pageTitle":"Stack","url":"api/Stack#Is","content":"&lt;/&gt; Stack.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a Stack. Determines whether the passed value is a Stack.  "},{"title":"Iterator​","type":1,"pageTitle":"Stack","url":"api/Stack#Iterator","content":"&lt;/&gt; Stack.Iterator() → StackIterator-- The iterator, which is used in a for loop. Returns an iterator that can be used to iterate through the Stack. This is just an alias for ipairs, which you can use instead. This only exists for consistency reasons.  "},{"title":"Push​","type":1,"pageTitle":"Stack","url":"api/Stack#Push","content":"&lt;/&gt; Stack:Push( Value: T-- The value you are pushing. ) → int-- The passed value's location. Pushes the passed value to the end of the Stack. "},{"title":"Errors","type":1,"pageTitle":"Stack","url":"api/Stack##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"Pop​","type":1,"pageTitle":"Stack","url":"api/Stack#Pop","content":"&lt;/&gt; Stack:Pop() → T?-- The last value from the Stack, if it exists. Removes the last value from the Stack.  "},{"title":"GetTop​","type":1,"pageTitle":"Stack","url":"api/Stack#GetTop","content":"&lt;/&gt; Stack:GetTop() → T?-- The last value. Gets the last value of the Stack.  "},{"title":"GetBottom​","type":1,"pageTitle":"Stack","url":"api/Stack#GetBottom","content":"&lt;/&gt; Stack:GetBottom() → T?-- The first value. Gets the first value of the Stack.  "},{"title":"IsEmpty​","type":1,"pageTitle":"Stack","url":"api/Stack#IsEmpty","content":"&lt;/&gt; Stack:IsEmpty() → boolean-- Whether or not the Stack is empty. Determines if the Stack is empty. "},{"title":"Queue","type":0,"sectionRef":"#","url":"api/Queue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Queue","url":"api/Queue#properties","content":" "},{"title":"First​","type":1,"pageTitle":"Queue","url":"api/Queue#First","content":"&lt;/&gt; Queue.First: int The index of the first element in the queue.  "},{"title":"Length​","type":1,"pageTitle":"Queue","url":"api/Queue#Length","content":"&lt;/&gt; Queue.Length: int The length of the queue. "},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"api/Queue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Queue","url":"api/Queue#new","content":"&lt;/&gt; Queue.new() → Queue&lt;T&gt; Creates an empty Queue.  "},{"title":"Is​","type":1,"pageTitle":"Queue","url":"api/Queue#Is","content":"&lt;/&gt; Queue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a Queue. Determines whether the passed value is a Queue.  "},{"title":"Push​","type":1,"pageTitle":"Queue","url":"api/Queue#Push","content":"&lt;/&gt; Queue:Push( Value: T-- The value you are pushing. ) → int-- The passed value's location. Pushes the passed value to the end of the Queue. "},{"title":"Errors","type":1,"pageTitle":"Queue","url":"api/Queue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"Pop​","type":1,"pageTitle":"Queue","url":"api/Queue#Pop","content":"&lt;/&gt; Queue:Pop() → T?-- The first value from the Queue, if it exists. Removes the first value from the Queue.  "},{"title":"GetFront​","type":1,"pageTitle":"Queue","url":"api/Queue#GetFront","content":"&lt;/&gt; Queue:GetFront() → T-- The first value. Gets the front value of the Queue.  "},{"title":"GetBack​","type":1,"pageTitle":"Queue","url":"api/Queue#GetBack","content":"&lt;/&gt; Queue:GetBack() → T-- The last value. Gets the last value of the Queue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"Queue","url":"api/Queue#IsEmpty","content":"&lt;/&gt; Queue:IsEmpty() → boolean-- Whether or not the Queue is empty. Determines if the Queue is empty.  "},{"title":"Iterator​","type":1,"pageTitle":"Queue","url":"api/Queue#Iterator","content":"&lt;/&gt; Queue:Iterator() → QueueIterator-- The iterator, which is used in a for loop. Returns an iterator that can be used to iterate through the Queue. "},{"title":"CircularBuffer","type":0,"sectionRef":"#","url":"api/CircularBuffer","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#properties","content":" "},{"title":"Capacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Capacity","content":"&lt;/&gt; CircularBuffer.Capacity: int The capacity of the CircularBuffer.  "},{"title":"Data​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Data","content":"&lt;/&gt; CircularBuffer.Data: Array&lt;T&gt; The data of the CircularBuffer. "},{"title":"Functions​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#new","content":"&lt;/&gt; CircularBuffer.new( MaxCapacity: int-- The maximum size of the CircularBuffer before it starts removing values. ) → CircularBuffer&lt;T&gt;-- Returns a new CircularBuffer. Creates a new CircularBuffer.  "},{"title":"Clear​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Clear","content":"&lt;/&gt; CircularBuffer:Clear() → CircularBuffer&lt;T&gt;-- Returns self. Clears the CircularBuffer.  "},{"title":"GetCapacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#GetCapacity","content":"&lt;/&gt; CircularBuffer:GetCapacity() → int-- The maximum capacity of the CircularBuffer. Gets the capacity of the CircularBuffer.  "},{"title":"GetMaxCapacity​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#GetMaxCapacity","content":"&lt;/&gt; CircularBuffer:GetMaxCapacity() → int-- The maximum capacity of the CircularBuffer. Gets the capacity of the CircularBuffer.  "},{"title":"IsEmpty​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#IsEmpty","content":"&lt;/&gt; CircularBuffer:IsEmpty() → boolean-- Whether or not the CircularBuffer is empty. Returns whether or not the CircularBuffer is empty.  "},{"title":"IsFull​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#IsFull","content":"&lt;/&gt; CircularBuffer:IsFull() → boolean-- Whether or not the CircularBuffer is full. Returns whether or not the CircularBuffer is full.  "},{"title":"Push​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Push","content":"&lt;/&gt; CircularBuffer:Push( NewData: NonNil-- The data you are pushing. ) → any?-- Returns the removed data, if there was any. Pushes the passed data to the front of the CircularBuffer. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescriptionInvalidData\tThrown when NewData is null.  "},{"title":"Replace​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Replace","content":"&lt;/&gt; CircularBuffer:Replace( Index: int,-- The index you are replacing. NewData: NonNil-- The data you are replacing with. ) → any-- The replaced data. Replaces the index in the CircularBuffer with the passed data. This function errors if there is no index to replace. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescriptionInvalidData\tThrown when NewData is null. InvalidIndex\tThrown when Index is not a number. IndexTooLarge\tThrown when Index is greater than the CircularBuffer's capacity.  "},{"title":"Insert​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Insert","content":"&lt;/&gt; CircularBuffer:Insert( Index: int,-- The index you are replacing. NewData: NonNil-- The data you are replacing with. ) → any?-- The replaced data. Inserts the data at the index in the CircularBuffer. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescriptionInvalidData\tThrown when NewData is null. InvalidIndex\tThrown when Index is not a number. IndexTooLarge\tThrown when Index is greater than the CircularBuffer's capacity.  "},{"title":"PeekAt​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#PeekAt","content":"&lt;/&gt; CircularBuffer:PeekAt( Index: int?-- The index you are getting. Defaults to 1. ) → any?-- The value at the given index. Returns the value at the given index. "},{"title":"Errors","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer##","content":"Type\tDescriptionInvalidIndex\tThrown when Index is not a number or nil.  "},{"title":"Iterator​","type":1,"pageTitle":"CircularBuffer","url":"api/CircularBuffer#Iterator","content":"&lt;/&gt; CircularBuffer:Iterator() → Iterator-- The ipairs iterator. Returns an iterator for iterating over the CircularBuffer. Just a wrapper for ipairs(self.Data). "},{"title":"ArrayList","type":0,"sectionRef":"#","url":"api/ArrayList","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#properties","content":" "},{"title":"IsFixedSize​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IsFixedSize","content":"&lt;/&gt; ArrayList.IsFixedSize: boolean Whether or not the ArrayList is fixed size. Defaults to false.  "},{"title":"IsReadOnly​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IsReadOnly","content":"&lt;/&gt; ArrayList.IsReadOnly: boolean Whether or not the ArrayList is read-only. Defaults to false.  "},{"title":"Length​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Length","content":"&lt;/&gt; ArrayList.Length: number The length of the ArrayList. "},{"title":"Functions​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#new","content":"&lt;/&gt; ArrayList.new() → ArrayList&lt;T&gt; Creates a new ArrayList.  "},{"title":"FromCapacity​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#FromCapacity","content":"&lt;/&gt; ArrayList.FromCapacity( Capacity: int-- The capacity of the ArrayList. ) → ArrayList&lt;T&gt; Creates a new ArrayList with the given capacity.  "},{"title":"FromArray​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#FromArray","content":"&lt;/&gt; ArrayList.FromArray( Array: Array&lt;T&gt;-- The array to use as the source. This makes a shallow copy. ) → ArrayList&lt;T&gt; Creates a new ArrayList from the given array. Will not mutate the original array.  "},{"title":"Is​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Is","content":"&lt;/&gt; ArrayList.Is( Value: any-- The value to check. ) → boolean Determines if the passed Value is an ArrayList.  "},{"title":"MarkReadOnly​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#MarkReadOnly","content":"&lt;/&gt; ArrayList.MarkReadOnly( List: ArrayList&lt;T&gt;-- The ArrayList to make read-only. ) → ArrayList&lt;T&gt; Marks the ArrayList as read-only. Returns a clone of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionInvalidArgument\tThrown when the List is nil. NotArrayList\tThrown when the List isn't an ArrayList.  "},{"title":"MarkFixedSize​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#MarkFixedSize","content":"&lt;/&gt; ArrayList.MarkFixedSize( List: ArrayList&lt;T&gt;-- The ArrayList to mark as fixed size. ) → ArrayList&lt;T&gt; Marks the ArrayList as a fixed size. Returns a clone of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionInvalidArgument\tThrown when the List is nil. NotArrayList\tThrown when the List isn't an ArrayList.  "},{"title":"Add​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Add","content":"&lt;/&gt; ArrayList:Add( Value: NonNil-- The value to be added to the end of the ArrayList. The value cannot be nil. ) → int-- The ArrayList index at which the value has been added. Adds an object to the end of the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionIsFixedSize\tThrown when the ArrayList is fixed size. IsReadOnly\tThrown when the ArrayList is read-only. InvalidArgument\tThrown when the value is nil.  "},{"title":"Clone​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Clone","content":"&lt;/&gt; ArrayList:Clone() → ArrayList&lt;T&gt;-- A shallow copy of the ArrayList. Creates a shallow copy of the ArrayList.  "},{"title":"Clear​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Clear","content":"&lt;/&gt; ArrayList:Clear() → () Clears the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionIsFixedSize\tThrown when the ArrayList is fixed size. IsReadOnly\tThrown when the ArrayList is read-only.  "},{"title":"Contains​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Contains","content":"&lt;/&gt; ArrayList:Contains( Value: NonNil-- The value to check. ) → boolean Determines if the ArrayList contains the given value. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionInvalidArgument\tThrown when the value is nil.  "},{"title":"IndexOf​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#IndexOf","content":"&lt;/&gt; ArrayList:IndexOf( Value: NonNil-- The value to search for. ) → int?-- The index of the value. Locates the index of the given value in the ArrayList. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionInvalidArgument\tThrown when the value is nil.  "},{"title":"Insert​","type":1,"pageTitle":"ArrayList","url":"api/ArrayList#Insert","content":"&lt;/&gt; ArrayList:Insert( Index: int,-- The index to insert at. Value: NonNil-- The value to be added to the end of the ArrayList. The value cannot be nil. ) → () Inserts the given value into the ArrayList at the given index. "},{"title":"Errors","type":1,"pageTitle":"ArrayList","url":"api/ArrayList##","content":"Type\tDescriptionIsFixedSize\tThrown when the ArrayList is fixed size. IsReadOnly\tThrown when the ArrayList is read-only. InvalidArgument\tThrown when either the value or the index is incorrect. "},{"title":"LinkedList","type":0,"sectionRef":"#","url":"api/LinkedList","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Length","content":"&lt;/&gt; LinkedList.Length: int The length of the LinkedList. "},{"title":"Functions​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#functions","content":" "},{"title":"new​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#new","content":"&lt;/&gt; LinkedList.new( Values: Array&lt;T&gt;?-- An optional array that contains the values you want to add. ) → LinkedList&lt;T&gt; Creates an empty LinkedList.  "},{"title":"Is​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Is","content":"&lt;/&gt; LinkedList.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a LinkedList. Determines whether the passed value is a LinkedList.  "},{"title":"Push​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Push","content":"&lt;/&gt; LinkedList:Push( Value: T-- The value you are appending. ) → ListNode-- The appended node. Adds the element Value to the end of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescriptionInvalidValue\tThrown when the value passed is nil.  "},{"title":"Append​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Append","content":"&lt;/&gt; LinkedList:Append( List: LinkedList&lt;T&gt;-- The LinkedList you are appending from. ) → () Adds the elements from List to the end of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescriptionInvalidList\tThrown when the List passed is not a LinkedList.  "},{"title":"PushFront​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#PushFront","content":"&lt;/&gt; LinkedList:PushFront( Value: T-- The value you are prepending. ) → ListNode-- The prepended node. Adds the element Value to the start of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescriptionInvalidValue\tThrown when the value passed is nil.  "},{"title":"Prepend​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Prepend","content":"&lt;/&gt; LinkedList:Prepend( List: LinkedList&lt;T&gt;-- The LinkedList you are prepending from. ) → () Adds the elements from List to the start of the list. This operation should compute in O(1) time and O(1) memory. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescriptionInvalidList\tThrown when the List passed is not a LinkedList.  "},{"title":"Pop​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Pop","content":"&lt;/&gt; LinkedList:Pop() → ListNode?-- The popped node, if there was one. Removes the first element and returns it, or nil if the list is empty. This operation should compute in O(1) time.  "},{"title":"PopBack​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#PopBack","content":"&lt;/&gt; LinkedList:PopBack() → ListNode?-- The popped node, if there was one. Removes the last element and returns it, or nil if the list is empty. This operation should compute in O(1) time.  "},{"title":"IsEmpty​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#IsEmpty","content":"&lt;/&gt; LinkedList:IsEmpty() → boolean Returns true if the LinkedList is empty. This operation should compute in O(1) time.  "},{"title":"Clear​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Clear","content":"&lt;/&gt; LinkedList:Clear() → LinkedList&lt;T&gt; Removes all elements from the LinkedList. This operation should compute in O(n) time.  "},{"title":"Contains​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Contains","content":"&lt;/&gt; LinkedList:Contains( Value: ListNode | any-- The value you are searching for. ) → boolean Returns true if the LinkedList contains an element equal to the given value.  "},{"title":"Iterator​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Iterator","content":"&lt;/&gt; LinkedList:Iterator() → ListIterator Provides a forward iterator.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#ReverseIterator","content":"&lt;/&gt; LinkedList:ReverseIterator() → ListIterator Provides a reverse iterator.  "},{"title":"ToArray​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#ToArray","content":"&lt;/&gt; LinkedList:ToArray() → Array&lt;T&gt;-- An array with every element in the LinkedList. Returns an array containing all of the elements in this list in proper sequence (from first to last element).  "},{"title":"Remove​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#Remove","content":"&lt;/&gt; LinkedList:Remove( Index: int-- The index of the node you want to remove. ) → LinkedList&lt;T&gt; Removes the element at the given index from the LinkedList. This operation should compute in O(n) time. "},{"title":"Errors","type":1,"pageTitle":"LinkedList","url":"api/LinkedList##","content":"Type\tDescriptionInvalidIndex\tThrown when the index is out of bounds.  "},{"title":"RemoveValue​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#RemoveValue","content":"&lt;/&gt; LinkedList:RemoveValue( Value: any-- The value you want to remove from the LinkedList. ) → LinkedList&lt;T&gt; Removes any element with the given value from the LinkedList. This operation should compute in O(n) time.  "},{"title":"RemoveNode​","type":1,"pageTitle":"LinkedList","url":"api/LinkedList#RemoveNode","content":"&lt;/&gt; LinkedList:RemoveNode( Node: ListNode-- The node you want to remove from the LinkedList. ) → LinkedList&lt;T&gt; Removes the given ListNode from the LinkedList. This operation should compute in O(n) time. "},{"title":"MaxPriorityQueue","type":0,"sectionRef":"#","url":"api/MaxPriorityQueue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Length","content":"&lt;/&gt; MaxPriorityQueue.Length: int The length of the MaxPriorityQueue. "},{"title":"Functions​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#new","content":"&lt;/&gt; MaxPriorityQueue.new() → MaxPriorityQueue&lt;T&gt; Creates a new MaxPriorityQueue.  "},{"title":"Is​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Is","content":"&lt;/&gt; MaxPriorityQueue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a MaxPriorityQueue. Determines whether the passed value is a MaxPriorityQueue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#IsEmpty","content":"&lt;/&gt; MaxPriorityQueue:IsEmpty() → boolean-- This will be true iff the queue is empty. Check whether the MaxPriorityQueue has no elements.  "},{"title":"InsertWithPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MaxPriorityQueue:InsertWithPriority( Value: NonNil,-- The value of the element. Priority: number-- The priority of the element. ) → int-- The inserted position. Add an element to the MaxPriorityQueue with an associated priority. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"ChangePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ChangePriority","content":"&lt;/&gt; MaxPriorityQueue:ChangePriority( Value: NonNil,-- The value you are updating the priority of. NewPriority: number-- The new priority of the value. ) → int?-- The new position of the HeapEntry if it was found. This function will error if it couldn't find the value. Changes the priority of the given value in the MaxPriorityQueue. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil. CouldNotFind\tThrown when the value couldn't be found.  "},{"title":"GetFirstPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MaxPriorityQueue:GetFirstPriority() → number?-- The priority of the first value. Gets the priority of the first value in the MaxPriorityQueue. This is the value that will be removed last.  "},{"title":"GetLastPriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#GetLastPriority","content":"&lt;/&gt; MaxPriorityQueue:GetLastPriority() → number?-- The priority of the last value. Gets the priority of the last value in the MaxPriorityQueue. This is the value that will be removed first.  "},{"title":"PopElement​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#PopElement","content":"&lt;/&gt; MaxPriorityQueue:PopElement( OnlyValue: boolean?-- Whether or not to return only the value or the entire entry. ) → T | HeapEntry-- The removed element. Remove the element from the MaxPriorityQueue that has the highest priority, and return it.  "},{"title":"ToArray​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ToArray","content":"&lt;/&gt; MaxPriorityQueue:ToArray( OnlyValues: boolean?-- Whether or not the array is just the values or the priorities as well. ) → Array&lt;T&gt; | Array&lt;HeapEntry&gt;-- The MaxPriorityQueue's array. Converts the entire MaxPriorityQueue to an array.  "},{"title":"Iterator​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Iterator","content":"&lt;/&gt; MaxPriorityQueue:Iterator(OnlyValues: boolean?Whetherornottheiteratorreturnsjustthevaluesortheprioritiesaswell.) → IteratorFunction-- The iterator function. Usage is for Index, Value in MaxPriorityQueue:Iterator(OnlyValues) do. Returns an iterator function for iterating over the MaxPriorityQueue.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#ReverseIterator","content":"&lt;/&gt; MaxPriorityQueue:ReverseIterator( OnlyValues: boolean?-- Whether or not the iterator returns just the values or the priorities as well. ) → IteratorFunction-- The iterator function. Usage is for Index, Value in MaxPriorityQueue:ReverseIterator(OnlyValues) do. Returns an iterator function for iterating over the MaxPriorityQueue in reverse.  "},{"title":"Clear​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Clear","content":"&lt;/&gt; MaxPriorityQueue:Clear() → MaxPriorityQueue&lt;T&gt;-- The same MaxPriorityQueue. Clears the entire MaxPriorityQueue.  "},{"title":"Contains​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#Contains","content":"&lt;/&gt; MaxPriorityQueue:Contains( Value: NonNil-- The value you are searching for. ) → boolean-- Whether or not the value was found. Determines if the MaxPriorityQueue contains the given value. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"RemovePriority​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#RemovePriority","content":"&lt;/&gt; MaxPriorityQueue:RemovePriority( Priority: number-- The priority you are removing from the MaxPriorityQueue. ) → () Removes the HeapEntry with the given priority, if it exists.  "},{"title":"RemoveValue​","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue#RemoveValue","content":"&lt;/&gt; MaxPriorityQueue:RemoveValue( Value: NonNil-- The value you are removing from the MaxPriorityQueue. ) → () Removes the HeapEntry with the given value, if it exists. "},{"title":"Errors","type":1,"pageTitle":"MaxPriorityQueue","url":"api/MaxPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil. "},{"title":"MinPriorityQueue","type":0,"sectionRef":"#","url":"api/MinPriorityQueue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#properties","content":" "},{"title":"Length​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Length","content":"&lt;/&gt; MinPriorityQueue.Length: int The length of the MinPriorityQueue. "},{"title":"Functions​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#new","content":"&lt;/&gt; MinPriorityQueue.new() → MinPriorityQueue&lt;T&gt; Creates a new MinPriorityQueue.  "},{"title":"Is​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Is","content":"&lt;/&gt; MinPriorityQueue.Is( Value: any-- The value to check. ) → boolean-- Whether or not the passed value is a MinPriorityQueue. Determines whether the passed value is a MinPriorityQueue.  "},{"title":"IsEmpty​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#IsEmpty","content":"&lt;/&gt; MinPriorityQueue:IsEmpty() → boolean-- This will be true iff the queue is empty. Check whether the MinPriorityQueue has no elements.  "},{"title":"InsertWithPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#InsertWithPriority","content":"&lt;/&gt; MinPriorityQueue:InsertWithPriority( Value: NonNil,-- The value of the element. Priority: number-- The priority of the element. ) → int-- The inserted position. Add an element to the MinPriorityQueue with an associated priority. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"ChangePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ChangePriority","content":"&lt;/&gt; MinPriorityQueue:ChangePriority( Value: NonNil,-- The value you are updating the priority of. NewPriority: number-- The new priority of the value. ) → int?-- The new position of the HeapEntry if it was found. This function will error if it couldn't find the value. Changes the priority of the given value in the MinPriorityQueue. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil. CouldNotFind\tThrown when the value couldn't be found.  "},{"title":"GetFirstPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#GetFirstPriority","content":"&lt;/&gt; MinPriorityQueue:GetFirstPriority() → number?-- The priority of the first value. Gets the priority of the first value in the MinPriorityQueue. This is the value that will be removed last.  "},{"title":"GetLastPriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#GetLastPriority","content":"&lt;/&gt; MinPriorityQueue:GetLastPriority() → number?-- The priority of the last value. Gets the priority of the last value in the MinPriorityQueue. This is the value that will be removed first.  "},{"title":"PopElement​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#PopElement","content":"&lt;/&gt; MinPriorityQueue:PopElement( OnlyValue: boolean?-- Whether or not to return only the value or the entire entry. ) → T | HeapEntry-- The removed element. Remove the element from the MinPriorityQueue that has the highest priority, and return it.  "},{"title":"ToArray​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ToArray","content":"&lt;/&gt; MinPriorityQueue:ToArray( OnlyValues: boolean?-- Whether or not the array is just the values or the priorities as well. ) → Array&lt;T&gt; | Array&lt;HeapEntry&gt;-- The MinPriorityQueue's array. Converts the entire MinPriorityQueue to an array.  "},{"title":"Iterator​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Iterator","content":"&lt;/&gt; MinPriorityQueue:Iterator(OnlyValues: boolean?Whetherornottheiteratorreturnsjustthevaluesortheprioritiesaswell.) → IteratorFunction-- The iterator function. Usage is for Index, Value in MinPriorityQueue:Iterator(OnlyValues) do. Returns an iterator function for iterating over the MinPriorityQueue.  "},{"title":"ReverseIterator​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#ReverseIterator","content":"&lt;/&gt; MinPriorityQueue:ReverseIterator( OnlyValues: boolean?-- Whether or not the iterator returns just the values or the priorities as well. ) → IteratorFunction-- The iterator function. Usage is for Index, Value in MinPriorityQueue:ReverseIterator(OnlyValues) do. Returns an iterator function for iterating over the MinPriorityQueue in reverse.  "},{"title":"Clear​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Clear","content":"&lt;/&gt; MinPriorityQueue:Clear() → MinPriorityQueue&lt;T&gt;-- The same MinPriorityQueue. Clears the entire MinPriorityQueue.  "},{"title":"Contains​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#Contains","content":"&lt;/&gt; MinPriorityQueue:Contains( Value: NonNil-- The value you are searching for. ) → boolean-- Whether or not the value was found. Determines if the MinPriorityQueue contains the given value. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil.  "},{"title":"RemovePriority​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#RemovePriority","content":"&lt;/&gt; MinPriorityQueue:RemovePriority( Priority: number-- The priority you are removing from the MinPriorityQueue. ) → () Removes the HeapEntry with the given priority, if it exists.  "},{"title":"RemoveValue​","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue#RemoveValue","content":"&lt;/&gt; MinPriorityQueue:RemoveValue( Value: NonNil-- The value you are removing from the MinPriorityQueue. ) → () Removes the HeapEntry with the given value, if it exists. "},{"title":"Errors","type":1,"pageTitle":"MinPriorityQueue","url":"api/MinPriorityQueue##","content":"Type\tDescriptionInvalidValue\tThrown when the value is nil. "}]